// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved

syntax = "proto3";
package opi_api.storage.v1;
option go_package = "github.com/opiproject/opi-api/storage/v1/gen/go";
import "common.proto";
import "uuid.proto";
import "object_key.proto";

// Front End (host-facing) APIs.

// NVMe/PCIe emulation

service FrontendNvme {
    rpc NVMeSubsystemCreate (NVMeSubsystemCreateRequest) returns (NVMeSubsystemCreateResponse) {}
    rpc NVMeSubsystemDelete (NVMeSubsystemDeleteRequest) returns (NVMeSubsystemDeleteResponse) {}
    rpc NVMeSubsystemUpdate (NVMeSubsystemUpdateRequest) returns (NVMeSubsystemUpdateResponse) {}
    rpc NVMeSubsystemList   (NVMeSubsystemListRequest)   returns (NVMeSubsystemListResponse)   {}
    rpc NVMeSubsystemGet    (NVMeSubsystemGetRequest)    returns (NVMeSubsystemGetResponse)    {}
    rpc NVMeSubsystemStats  (NVMeSubsystemStatsRequest)  returns (NVMeSubsystemStatsResponse)  {}

    rpc NVMeControllerCreate (NVMeControllerCreateRequest) returns (NVMeControllerCreateResponse) {}
    rpc NVMeControllerDelete (NVMeControllerDeleteRequest) returns (NVMeControllerDeleteResponse) {}
    rpc NVMeControllerUpdate (NVMeControllerUpdateRequest) returns (NVMeControllerUpdateResponse) {}
    rpc NVMeControllerList   (NVMeControllerListRequest)   returns (NVMeControllerListResponse)   {}
    rpc NVMeControllerGet    (NVMeControllerGetRequest)    returns (NVMeControllerGetResponse)    {}
    rpc NVMeControllerStats  (NVMeControllerStatsRequest)  returns (NVMeControllerStatsResponse)  {}

    rpc NVMeNamespaceCreate (NVMeNamespaceCreateRequest) returns (NVMeNamespaceCreateResponse) {}
    rpc NVMeNamespaceDelete (NVMeNamespaceDeleteRequest) returns (NVMeNamespaceDeleteResponse) {}
    rpc NVMeNamespaceUpdate (NVMeNamespaceUpdateRequest) returns (NVMeNamespaceUpdateResponse) {}
    rpc NVMeNamespaceList   (NVMeNamespaceListRequest)   returns (NVMeNamespaceListResponse)   {}
    rpc NVMeNamespaceGet    (NVMeNamespaceGetRequest)    returns (NVMeNamespaceGetResponse)    {}
    rpc NVMeNamespaceStats  (NVMeNamespaceStatsRequest)  returns (NVMeNamespaceStatsResponse)  {}
}

message NVMeSubsystem {
    // object's unique identifier
    common.v1.ObjectKey id = 1;

    // serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
    string serial_number = 2;

    // model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
    string model_number = 3;

    // maximum namespaces within a subsystem
    int32 max_ns = 4;
}

message NVMeController {
    // object's unique identifier
    common.v1.ObjectKey id = 1;

    // subsystem controller id range: 0 to 65535.
    // must not be reused under the same subsystem
    uint32 nvme_controller_id  = 2;

    // xPU's PCI ID for the controller
    PciEndpoint pcie_id = 3;

    // maximum host IO queue pairs allowed, value will default to
    // limits in PCI device configuration; if set to 0 or more it
    // will default to maximum permitted per xPU's capability
    uint32 max_io_qps = 4;

    // maximum Number of namespaces that will be provisioned under
    // the controller.
    uint32 max_ns = 5;
}

message NVMeNamespace {
    // namespace's unique key
    common.v1.ObjectKey id = 1;

    // Globally unique identifier for the namespace
    string nguid = 2;

    // 64bit Extended unique identifier for the namespace
    // mandatory if guid is not specified, optional otherwise
    fixed64 eui64 = 3;

    // Globally unique identifier for the namespace
    common.v1.Uuid uuid = 4;

    // The back/middle-end volume to back this namespace.
    common.v1.ObjectKey volume_id = 5;
}

message NVMeSubsystemCreateRequest {
    NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemCreateResponse {
    // Intentionally empty.
}

message NVMeSubsystemDeleteRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeSubsystemDeleteResponse {
    uint32 result = 1;
}

message NVMeSubsystemUpdateRequest {
    NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemUpdateResponse {
    uint32 result = 1;
}

message NVMeSubsystemListRequest {
    // Intentionally empty.
}

message NVMeSubsystemListResponse {
    repeated NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemGetRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeSubsystemGetResponse {
    NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemStatsRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeSubsystemStatsResponse {
    string stats = 1;
}

message NVMeControllerCreateRequest {
    NVMeController controller = 1;

    // The subsystem to associate this controller with
    common.v1.ObjectKey subsystem_id = 2;
}

message NVMeControllerCreateResponse {
    // Intentionally empty.
}

message NVMeControllerDeleteRequest {
    common.v1.ObjectKey controller_id = 1;
}

message NVMeControllerDeleteResponse {
    // Intentionally empty.
}

message NVMeControllerUpdateRequest {
    NVMeController controller = 1;
}

message NVMeControllerUpdateResponse {
    // Intentionally empty.
}

message NVMeControllerListRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeControllerListResponse {
    repeated NVMeController controller = 1;
}

message NVMeControllerGetRequest {
    common.v1.ObjectKey controller_id = 1;
}

message NVMeControllerGetResponse {
    NVMeController controller = 1;
}

message NVMeControllerStatsRequest {
    common.v1.ObjectKey id = 1;
}

message NVMeControllerStatsResponse {
    common.v1.ObjectKey id = 1;
    string stats = 2;
}

message NVMeNamespaceCreateRequest {
    NVMeNamespace namespace = 1;

    common.v1.ObjectKey subsystem_id = 2;

    // The namespace ID inside of the subsystem where this namespace
    // can be found.
    uint32 nsid = 3;
}

message NVMeNamespaceCreateResponse {
    // Intentionally empty.
}

message NVMeNamespaceDeleteRequest {
    common.v1.ObjectKey namespace_id = 1;
}

message NVMeNamespaceDeleteResponse {
    // Intentionally empty.
}

message NVMeNamespaceUpdateRequest {
    NVMeNamespace namespace = 1;
}

message NVMeNamespaceUpdateResponse {
    // Intentionally empty.
}

message NVMeNamespaceListRequest {
    oneof view {
        common.v1.ObjectKey subsystem_id = 1;

        common.v1.ObjectKey controller_id = 2;
    }
}

message NVMeNamespaceListResponse {
    repeated NVMeNamespace namespace = 1;
}

message NVMeNamespaceGetRequest {
    common.v1.ObjectKey namespace_id = 1;
}

message NVMeNamespaceGetResponse {
    NVMeNamespace namespace = 1;
}

message NVMeNamespaceStatsRequest {
    common.v1.ObjectKey namespace_id = 1;
}

message NVMeNamespaceStatsResponse {
    common.v1.ObjectKey id = 1;
    string stats = 2;
}

